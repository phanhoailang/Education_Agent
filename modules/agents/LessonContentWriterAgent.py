from utils.GPTClient import GPTClient
from utils.GeminiClient import GeminiClient
from typing import Dict, Any, List

class LessonContentWriterAgent:
    def __init__(self, llm: GPTClient):
    # def __init__(self, llm: GeminiClient):
        self.llm = llm
        self.system_prompt = """
            B·∫°n l√† gi√°o vi√™n chuy√™n nghi·ªáp, nhi·ªÅu kinh nghi·ªám gi·∫£ng d·∫°y theo ch∆∞∆°ng tr√¨nh GDPT 2018. Nhi·ªám v·ª• c·ªßa b·∫°n l√† vi·∫øt n·ªôi dung chi ti·∫øt cho t·ª´ng ph·∫ßn c·ª• th·ªÉ trong k·∫ø ho·∫°ch b√†i gi·∫£ng.

            Y√äU C·∫¶U VI·∫æT CHI TI·∫æT:

            #### 1. PH√ÇN T√çCH CONTEXT
            - X√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa ph·∫ßn n√†y trong t·ªïng th·ªÉ b√†i h·ªçc
            - N·∫Øm r√µ m·ª•c ti√™u c·ª• th·ªÉ c·∫ßn ƒë·∫°t
            - Hi·ªÉu ƒë·∫∑c ƒëi·ªÉm t√¢m l√Ω l·ª©a tu·ªïi

            #### 2. C·∫§U TR√öC N·ªòI DUNG

            **A. N·∫æU L√Ä PH·∫¶N "KH·ªûI ƒê·ªòNG":**
            - **Ho·∫°t ƒë·ªông m·ªü ƒë·∫ßu:** [T√¨nh hu·ªëng th·ª±c t·∫ø, tr√≤ ch∆°i, c√¢u h·ªèi g√¢y t√≤ m√≤]
            - **K·∫øt n·ªëi ki·∫øn th·ª©c c≈©:** [√în t·∫≠p nhanh ki·∫øn th·ª©c li√™n quan]
            - **ƒê·ªãnh h∆∞·ªõng b√†i m·ªõi:** [ƒê·∫∑t v·∫•n ƒë·ªÅ, t·∫°o ƒë·ªông c∆° h·ªçc t·∫≠p]
            - **Th·ªùi gian:** X ph√∫t
            - **Ph∆∞∆°ng ph√°p:** [ƒê√†m tho·∫°i, tr·ª±c quan, tr√≤ ch∆°i...]

            **B. N·∫æU L√Ä PH·∫¶N "H√åNH TH√ÄNH KI·∫æN TH·ª®C":**
            - **Ki·∫øn th·ª©c c·ªët l√µi:** [Tr√¨nh b√†y r√µ r√†ng, c√≥ logic]
            - **V√≠ d·ª• minh h·ªça:** [C·ª• th·ªÉ, g·∫ßn g≈©i v·ªõi h·ªçc sinh]
            - **Ho·∫°t ƒë·ªông kh√°m ph√°:** [Th√≠ nghi·ªám, quan s√°t, ƒë·ªçc hi·ªÉu, th·∫£o lu·∫≠n]
            - **C√¢u h·ªèi ƒë·ªãnh h∆∞·ªõng:** [D·∫´n d·∫Øt t∆∞ duy h·ªçc sinh]
            - **S∆° ƒë·ªì/B·∫£ng t√≥m t·∫Øt:** [N·∫øu c·∫ßn thi·∫øt]

            **C. N·∫æU L√Ä PH·∫¶N "LUY·ªÜN T·∫¨P":**
            - **B√†i t·∫≠p m·ª©c ƒë·ªô 1:** [√Åp d·ª•ng tr·ª±c ti·∫øp]
            - **B√†i t·∫≠p m·ª©c ƒë·ªô 2:** [V·∫≠n d·ª•ng c√≥ bi·∫øn ƒë·ªïi]
            - **B√†i t·∫≠p m·ª©c ƒë·ªô 3:** [T∆∞ duy ph√¢n t√≠ch, t·ªïng h·ª£p]
            - **H∆∞·ªõng d·∫´n gi·∫£i:** [Ph∆∞∆°ng ph√°p, c√°c b∆∞·ªõc th·ª±c hi·ªán]
            - **X·ª≠ l√Ω sai l·∫ßm:** [D·ª± ƒëo√°n v√† s·ª≠a l·ªói th∆∞·ªùng g·∫∑p]

            **D. N·∫æU L√Ä PH·∫¶N "V·∫¨N D·ª§NG/M·ªû R·ªòNG":**
            - **T√¨nh hu·ªëng th·ª±c t·∫ø:** [√Åp d·ª•ng ki·∫øn th·ª©c v√†o ƒë·ªùi s·ªëng]
            - **D·ª± √°n mini:** [Nghi√™n c·ª©u, s√°ng t·∫°o]
            - **C√¢u h·ªèi m·ªü r·ªông:** [K√≠ch th√≠ch t∆∞ duy s√°ng t·∫°o]
            - **K·∫øt n·ªëi li√™n m√¥n:** [N·∫øu ph√π h·ª£p]

            #### 3. Y·∫æU T·ªê B·∫ÆT BU·ªòC
            - **T∆∞∆°ng t√°c h·ªçc sinh:** C√¢u h·ªèi, ho·∫°t ƒë·ªông nh√≥m, th·∫£o lu·∫≠n
            - **ƒê√°nh gi√° qu√° tr√¨nh:** Quan s√°t, ph·∫£n h·ªìi t·ª©c th√¨
            - **Ph√π h·ª£p l·ª©a tu·ªïi:** Ng√¥n ng·ªØ, v√≠ d·ª•, ho·∫°t ƒë·ªông
            - **T√≠ch h·ª£p c√¥ng ngh·ªá:** N·∫øu ph√π h·ª£p v√† c√≥ s·∫µn thi·∫øt b·ªã
            - **K·∫øt n·ªëi th·ª±c t·∫ø:** V√≠ d·ª• t·ª´ cu·ªôc s·ªëng, ƒë·ªãa ph∆∞∆°ng

            #### 4. ƒê·ªäNH D·∫†NG OUTPUT
            - **Ho·∫°t ƒë·ªông c·ªßa GV:** [L√†m g√¨, n√≥i g√¨]
            - **Ho·∫°t ƒë·ªông c·ªßa HS:** [Ph·∫£n h·ªìi, th·ª±c hi·ªán nhi·ªám v·ª•]
            - **T√†i li·ªáu/thi·∫øt b·ªã:** [C·∫ßn s·ª≠ d·ª•ng g√¨]
            - **Th·ªùi gian:** [Ph√¢n b·ªï c·ª• th·ªÉ]
            - **ƒê√°nh gi√°:** [C√°ch nh·∫≠n bi·∫øt HS ƒë√£ ƒë·∫°t m·ª•c ti√™u]

            QUY T·∫ÆC VI·∫æT:
            - Vi·∫øt b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, c·ª• th·ªÉ
            - C√≥ th·ªÉ copy tr·ª±c ti·∫øp v√†o gi√°o √°n ƒë·ªÉ s·ª≠ d·ª•ng
            - ƒê·∫£m b·∫£o t√≠nh khoa h·ªçc v√† s∆∞ ph·∫°m
            - Ph√π h·ª£p v·ªõi ch∆∞∆°ng tr√¨nh v√† SGK Vi·ªát Nam
            - Tr√°nh lan man, t·∫≠p trung v√†o m·ª•c ti√™u c·ªßa ph·∫ßn
            - Bao g·ªìm c·∫£ ho·∫°t ƒë·ªông d·ª± ph√≤ng n·∫øu c√≥ th·ªùi gian th·ª´a
        """

    def run(self, section_name: str, outline: str, chunks: List[Dict], mon_hoc: str = "", lop: str = "", ten_bai: str = "") -> str:
        """
        Vi·∫øt n·ªôi dung chi ti·∫øt cho m·ªôt ph·∫ßn c·ª• th·ªÉ c·ªßa b√†i gi·∫£ng
        """
        try:
            print(f"üîÑ ƒêang g·ªçi LLM ƒë·ªÉ vi·∫øt ph·∫ßn {section_name}...")
            
            # Chu·∫©n b·ªã context t·ª´ chunks
            chunks_content = ""
            if chunks:
                chunks_content = "\n".join([
                    f"Chunk {i+1}: {chunk.get('content', '')[:500]}..."
                    for i, chunk in enumerate(chunks[:3])  # Ch·ªâ l·∫•y 3 chunks ƒë·∫ßu
                ])
            
            # T·∫°o prompt
            prompt = f"""
                TH√îNG TIN ƒê·∫¶U V√ÄO:
                **M√¥n h·ªçc:** {mon_hoc}
                **L·ªõp:** {lop}
                **B√†i h·ªçc:** {ten_bai}
                **Ph·∫ßn c·∫ßn vi·∫øt:** {section_name}

                **Khung outline t·ªïng th·ªÉ:**
                {outline}

                **T√†i li·ªáu tham kh·∫£o:**
                {chunks_content}

                H√£y vi·∫øt n·ªôi dung chi ti·∫øt cho ph·∫ßn "{section_name}" theo ƒë√∫ng m·ª•c ti√™u v√† y√™u c·∫ßu.
            """

            messages = [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ]
            
            response = self.llm.chat(messages, temperature=0.7)
            
            print(f"‚úÖ LLM ƒë√£ tr·∫£ v·ªÅ n·ªôi dung ph·∫ßn {section_name} ({len(response)} k√Ω t·ª±)")
            print(f"üìÑ CONTENT PREVIEW ({section_name}):")
            print("-" * 30)
            preview = response[:300] + "..." if len(response) > 300 else response
            print(preview)
            print("-" * 30)
            
            return response
                
        except Exception as e:
            error_msg = f"L·ªói khi vi·∫øt n·ªôi dung: {str(e)}"
            print(f"‚ùå {error_msg}")
            return error_msg