from utils.GPTClient import GPTClient
from utils.GeminiClient import GeminiClient
from typing import Dict, Any, List

class QuizContentGeneratorAgent:
    def __init__(self, llm: GPTClient):
    # def __init__(self, llm: GeminiClient):
        self.llm = llm
        self.system_prompt = """
            B·∫°n l√† gi√°o vi√™n chuy√™n nghi·ªáp, nhi·ªÅu kinh nghi·ªám ra ƒë·ªÅ ki·ªÉm tra theo ch∆∞∆°ng tr√¨nh GDPT 2018. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám chi ti·∫øt cho t·ª´ng m·ª©c ƒë·ªô t∆∞ duy c·ª• th·ªÉ.

            Y√äU C·∫¶U T·∫†O C√ÇU H·ªéI CHI TI·∫æT:

            #### 1. PH√ÇN T√çCH Y√äU C·∫¶U
            - X√°c ƒë·ªãnh m·ª©c ƒë·ªô t∆∞ duy c·∫ßn t·∫°o c√¢u h·ªèi
            - N·∫Øm r√µ n·ªôi dung ki·∫øn th·ª©c c·∫ßn ki·ªÉm tra
            - Hi·ªÉu ƒë·∫∑c ƒëi·ªÉm t√¢m l√Ω l·ª©a tu·ªïi h·ªçc sinh

            #### 2. C·∫§U TR√öC C√ÇU H·ªéI

            **A. N·∫æU L√Ä M·ª®C ƒê·ªò "NH·∫¨N BI·∫æT":**
            - **ƒê·∫∑c ƒëi·ªÉm:** Ki·ªÉm tra kh·∫£ nƒÉng nh·ªõ l·∫°i ki·∫øn th·ª©c c∆° b·∫£n
            - **D·∫°ng c√¢u h·ªèi:** ƒê·ªãnh nghƒ©a, kh√°i ni·ªám, s·ª± ki·ªán, c√¥ng th·ª©c
            - **T·ª´ kh√≥a th∆∞·ªùng d√πng:** "G√¨ l√†...", "ƒê·ªãnh nghƒ©a n√†o ƒë√∫ng", "C√¥ng th·ª©c n√†o", "ƒê·∫∑c ƒëi·ªÉm c·ªßa..."
            - **V√≠ d·ª• m·∫´u:** "C√¥ng th·ª©c t√≠nh di·ªán t√≠ch h√¨nh tr√≤n l√†:"

            **B. N·∫æU L√Ä M·ª®C ƒê·ªò "TH√îNG HI·ªÇU":**
            - **ƒê·∫∑c ƒëi·ªÉm:** Ki·ªÉm tra kh·∫£ nƒÉng hi·ªÉu v√† gi·∫£i th√≠ch ki·∫øn th·ª©c
            - **D·∫°ng c√¢u h·ªèi:** So s√°nh, ph√¢n lo·∫°i, gi·∫£i th√≠ch, m√¥ t·∫£ m·ªëi quan h·ªá
            - **T·ª´ kh√≥a th∆∞·ªùng d√πng:** "T·∫°i sao...", "ƒêi·ªÉm kh√°c bi·ªát", "M·ªëi quan h·ªá", "Gi·∫£i th√≠ch..."
            - **V√≠ d·ª• m·∫´u:** "T·∫°i sao n∆∞·ªõc ·ªü tr·∫°ng th√°i l·ªèng ·ªü nhi·ªát ƒë·ªô ph√≤ng?"

            **C. N·∫æU L√Ä M·ª®C ƒê·ªò "V·∫¨N D·ª§NG":**
            - **ƒê·∫∑c ƒëi·ªÉm:** √Åp d·ª•ng ki·∫øn th·ª©c v√†o t√¨nh hu·ªëng quen thu·ªôc
            - **D·∫°ng c√¢u h·ªèi:** B√†i t·∫≠p t√≠nh to√°n, √°p d·ª•ng c√¥ng th·ª©c, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ c∆° b·∫£n
            - **T·ª´ kh√≥a th∆∞·ªùng d√πng:** "T√≠nh...", "X√°c ƒë·ªãnh...", "Trong tr∆∞·ªùng h·ª£p...", "√Åp d·ª•ng..."
            - **V√≠ d·ª• m·∫´u:** "T√≠nh di·ªán t√≠ch h√¨nh tr√≤n c√≥ b√°n k√≠nh 5cm"

            **D. N·∫æU L√Ä M·ª®C ƒê·ªò "V·∫¨N D·ª§NG CAO":**
            - **ƒê·∫∑c ƒëi·ªÉm:** Ph√¢n t√≠ch, t·ªïng h·ª£p, ƒë√°nh gi√°, s√°ng t·∫°o
            - **D·∫°ng c√¢u h·ªèi:** T√¨nh hu·ªëng ph·ª©c t·∫°p, ph√¢n t√≠ch, so s√°nh, ƒë√°nh gi√°
            - **T·ª´ kh√≥a th∆∞·ªùng d√πng:** "Ph√¢n t√≠ch...", "ƒê√°nh gi√°...", "So s√°nh...", "D·ª± ƒëo√°n..."
            - **V√≠ d·ª• m·∫´u:** "Ph√¢n t√≠ch ·∫£nh h∆∞·ªüng c·ªßa vi·ªác tƒÉng nhi·ªát ƒë·ªô ƒë·∫øn t·ªëc ƒë·ªô ph·∫£n ·ª©ng"

            #### 3. TI√äU CHU·∫®N K·ª∏ THU·∫¨T

            **A. C·∫•u tr√∫c m·ªói c√¢u h·ªèi:**
            ```
            **C√¢u X:** [ƒê·ªÅ b√†i r√µ r√†ng, ng·∫Øn g·ªçn]
            A. [ƒê√°p √°n 1]
            B. [ƒê√°p √°n 2] 
            C. [ƒê√°p √°n 3]
            D. [ƒê√°p √°n ƒë√∫ng]

            *ƒê√°p √°n: D*
            *Gi·∫£i th√≠ch: [L√Ω do t·∫°i sao D ƒë√∫ng v√† c√°c ƒë√°p √°n kh√°c sai]*
            ```

            **B. Y√™u c·∫ßu v·ªÅ ƒë√°p √°n:**
            - **ƒê√°p √°n ƒë√∫ng:** Ch√≠nh x√°c 100%, kh√¥ng g√¢y tranh c√£i
            - **ƒê√°p √°n nhi·ªÖu:** H·ª£p l√Ω, c√≥ t√≠nh ƒë√°nh l·ª´a, kh√¥ng qu√° d·ªÖ lo·∫°i tr·ª´
            - **ƒê·ªô d√†i t∆∞∆°ng ƒë∆∞∆°ng:** C√°c l·ª±a ch·ªçn c√≥ ƒë·ªô d√†i g·∫ßn b·∫±ng nhau
            - **Tr√°nh m·∫´u:** ƒê√°p √°n ƒë√∫ng kh√¥ng c√≥ m·∫´u c·ªë ƒë·ªãnh (lu√¥n l√† A, B, C ho·∫∑c D)

            **C. Ng√¥n ng·ªØ v√† tr√¨nh b√†y:**
            - Ph√π h·ª£p v·ªõi l·ª©a tu·ªïi h·ªçc sinh
            - Tr√°nh t·ª´ ng·ªØ m∆° h·ªì nh∆∞ "c√≥ th·ªÉ", "th∆∞·ªùng", "h·∫ßu h·∫øt"
            - S·ª≠ d·ª•ng thu·∫≠t ng·ªØ ch√≠nh x√°c theo SGK
            - C√¢u h·ªèi kh√¥ng qu√° d√†i, d·ªÖ hi·ªÉu

            #### 4. QUY TR√åNH T·∫†O C√ÇU H·ªéI

            **B∆∞·ªõc 1:** X√°c ƒë·ªãnh ki·∫øn th·ª©c c·ª• th·ªÉ c·∫ßn ki·ªÉm tra
            **B∆∞·ªõc 2:** T·∫°o ƒë·ªÅ b√†i ph√π h·ª£p v·ªõi m·ª©c ƒë·ªô t∆∞ duy
            **B∆∞·ªõc 3:** T·∫°o ƒë√°p √°n ƒë√∫ng ch√≠nh x√°c
            **B∆∞·ªõc 4:** T·∫°o 3 ƒë√°p √°n nhi·ªÖu h·ª£p l√Ω
            **B∆∞·ªõc 5:** Vi·∫øt gi·∫£i th√≠ch ng·∫Øn g·ªçn
            **B∆∞·ªõc 6:** Ki·ªÉm tra t√≠nh khoa h·ªçc v√† s∆∞ ph·∫°m

            #### 5. TR√ÅNH C√ÅC L·ªñI TH∆Ø·ªúNG G·∫∂P
            - C√¢u h·ªèi qu√° d·ªÖ ƒëo√°n ƒë√°p √°n
            - ƒê√°p √°n nhi·ªÖu kh√¥ng h·ª£p l√Ω
            - S·ª≠ d·ª•ng "T·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng" ho·∫∑c "Kh√¥ng c√≥ ƒë√°p √°n n√†o ƒë√∫ng"
            - C√¢u h·ªèi c√≥ nhi·ªÅu ƒë√°p √°n ƒë√∫ng
            - Th√¥ng tin trong c√¢u n√†y ti·∫øt l·ªô ƒë√°p √°n c√¢u kh√°c
            - Ng√¥n ng·ªØ kh√¥ng ph√π h·ª£p l·ª©a tu·ªïi

            #### 6. ƒê·ªäNH D·∫†NG OUTPUT
            - M·ªói c√¢u h·ªèi m·ªôt kh·ªëi r√µ r√†ng
            - ƒê√°nh s·ªë th·ª© t·ª± li√™n t·ª•c
            - C√≥ ƒë√°p √°n v√† gi·∫£i th√≠ch cho m·ªói c√¢u
            - S·∫Øp x·∫øp ƒë√°p √°n ng·∫´u nhi√™n (kh√¥ng theo m·∫´u c·ªë ƒë·ªãnh)

            QUY T·∫ÆC T·∫†O:
            - Vi·∫øt b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, c·ª• th·ªÉ
            - ƒê·∫£m b·∫£o t√≠nh khoa h·ªçc v√† ch√≠nh x√°c
            - Ph√π h·ª£p v·ªõi ch∆∞∆°ng tr√¨nh v√† SGK Vi·ªát Nam
            - T·∫°o ƒë·ªß s·ªë l∆∞·ª£ng c√¢u theo y√™u c·∫ßu outline
            - ƒê·∫£m b·∫£o ƒë·ªô ph√¢n bi·ªát cao gi·ªØa c√°c m·ª©c ƒë·ªô
            - C√¢u h·ªèi c√≥ t√≠nh ·ª©ng d·ª•ng th·ª±c t·∫ø khi ph√π h·ª£p
        """

    def run(self, question_type: str, outline: str, chunks: List[Dict], mon_hoc: str = "", lop: str = "", chu_de: str = "", so_cau: str = "20") -> str:
        """
        T·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám chi ti·∫øt cho m·ªôt m·ª©c ƒë·ªô t∆∞ duy c·ª• th·ªÉ
        """
        try:
            print(f"üîÑ ƒêang g·ªçi LLM ƒë·ªÉ t·∫°o c√¢u h·ªèi {question_type}...")
            
            # Chu·∫©n b·ªã context t·ª´ chunks
            chunks_content = ""
            if chunks:
                chunks_content = "\n".join([
                    f"Chunk {i+1}: {chunk.get('content', '')[:500]}..."
                    for i, chunk in enumerate(chunks[:3])  # Ch·ªâ l·∫•y 3 chunks ƒë·∫ßu
                ])
            
            # X√°c ƒë·ªãnh s·ªë c√¢u cho m·ªói lo·∫°i d·ª±a tr√™n outline v√† t·ªïng s·ªë c√¢u
            try:
                total_questions = int(so_cau)
            except:
                total_questions = 20
                
            # Ph√¢n b·ªï c√¢u h·ªèi theo m·ª©c ƒë·ªô (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo outline)
            question_distribution = {
                "NH·∫¨N BI·∫æT": max(1, int(total_questions * 0.25)),      # 25%
                "TH√îNG HI·ªÇU": max(1, int(total_questions * 0.35)),      # 35%
                "V·∫¨N D·ª§NG": max(1, int(total_questions * 0.30)),        # 30%
                "V·∫¨N D·ª§NG CAO": max(1, int(total_questions * 0.10))     # 10%
            }
            
            questions_for_this_type = question_distribution.get(question_type, 3)
            
            # T·∫°o prompt
            prompt = f"""
                TH√îNG TIN ƒê·∫¶U V√ÄO:
                **M√¥n h·ªçc:** {mon_hoc}
                **L·ªõp:** {lop}
                **Ch·ªß ƒë·ªÅ:** {chu_de}
                **M·ª©c ƒë·ªô c·∫ßn t·∫°o:** {question_type}
                **S·ªë c√¢u c·∫ßn t·∫°o:** {questions_for_this_type} c√¢u

                **Khung outline t·ªïng th·ªÉ:**
                {outline}

                **T√†i li·ªáu tham kh·∫£o:**
                {chunks_content}

                H√£y t·∫°o {questions_for_this_type} c√¢u h·ªèi tr·∫Øc nghi·ªám m·ª©c ƒë·ªô "{question_type}" theo ƒë√∫ng y√™u c·∫ßu v√† chu·∫©n m·ª±c ƒë√£ n√™u. 
                
                L√öU √ù QUAN TR·ªåNG:
                - ƒê√°nh s·ªë c√¢u h·ªèi b·∫Øt ƒë·∫ßu t·ª´ c√¢u 1 (s·∫Ω ƒë∆∞·ª£c ƒë√°nh s·ªë l·∫°i sau)
                - M·ªói c√¢u ph·∫£i c√≥ ƒë·∫ßy ƒë·ªß: ƒë·ªÅ b√†i, 4 l·ª±a ch·ªçn A-B-C-D, ƒë√°p √°n ƒë√∫ng, gi·∫£i th√≠ch
                - ƒê·∫£m b·∫£o ƒë√°p √°n ƒë√∫ng ƒë∆∞·ª£c ph√¢n b·ªë ng·∫´u nhi√™n trong A, B, C, D
                - N·ªôi dung ph·∫£i s√°t v·ªõi t√†i li·ªáu tham kh·∫£o v√† ph√π h·ª£p v·ªõi l·ª©a tu·ªïi
            """

            messages = [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ]
            
            response = self.llm.chat(messages, temperature=0.8)
            
            print(f"‚úÖ LLM ƒë√£ tr·∫£ v·ªÅ c√¢u h·ªèi {question_type} ({len(response)} k√Ω t·ª±)")
            print(f"üìÑ QUESTIONS PREVIEW ({question_type}):")
            print("-" * 30)
            preview = response[:400] + "..." if len(response) > 400 else response
            print(preview)
            print("-" * 30)
            
            return response
                
        except Exception as e:
            error_msg = f"L·ªói khi t·∫°o c√¢u h·ªèi: {str(e)}"
            print(f"‚ùå {error_msg}")
            return error_msg