# modules/rag_module/query_pipeline.py
import logging
from modules.agents.SubtopicGeneratorAgent import SubtopicGeneratorAgent
from modules.agents.CoverageEvaluatorAgent import CoverageEvaluatorAgent
from modules.rag_module.query_db.VectorSearcher import VectorSearcher
from modules.rag_module.datatypes.CoverageAssessment import CoverageAssessment
from modules.rag_module.datatypes.CoverageLevel import CoverageLevel

class QueryEvaluationPipeline:
    def __init__(self, llm, vector_searcher: VectorSearcher):
        self.subtopic_agent = SubtopicGeneratorAgent(llm)
        self.coverage_agent = CoverageEvaluatorAgent(llm)
        self.vector_searcher = vector_searcher
        self.logger = logging.getLogger(__name__)

    def print_report(self, request: str, subtopics: list[str], chunks: list, assessment: CoverageAssessment):
        print("\n" + "="*60)
        print("B√ÅO C√ÅO ƒê√ÅNH GI√Å N·ªòI DUNG")
        print("="*60)
        print(f"\nüìã Y√äU C·∫¶U NG∆Ø·ªúI D√ôNG:\n{request}")

        print(f"\nüìå C√ÅC CH·ª¶ ƒê·ªÄ C·∫¶N C√ì ({len(subtopics)}):")
        for topic in subtopics:
            print(f"‚Ä¢ {topic}")

        print(f"\nüîç K·∫æT QU·∫¢ T√åM KI·∫æM:")
        print(f"‚Ä¢ T·ªïng s·ªë chunk t√¨m th·∫•y: {len(chunks)}")
        print(f"‚Ä¢ Ngu·ªìn t√†i li·ªáu: {len(set(c.source_file for c in chunks))} file")
        avg_score = sum(c.score for c in chunks) / len(chunks) if chunks else 0
        print(f"‚Ä¢ ƒêi·ªÉm relevance trung b√¨nh: {avg_score:.3f}")

        print(f"\nüìä ƒê√ÅNH GI√Å ƒê·ªò PH·ª¶:")
        print(f"‚Ä¢ M·ª©c ƒë·ªô: {assessment.level.value.upper()}")
        print(f"‚Ä¢ ƒêi·ªÉm s·ªë: {assessment.score:.2f}/1.0")
        print(f"‚Ä¢ Ch·ªß ƒë·ªÅ ƒë√£ c√≥: {len(assessment.covered_topics)}")
        print(f"‚Ä¢ Ch·ªß ƒë·ªÅ thi·∫øu: {len(assessment.missing_topics)}")

        print(f"\n‚úÖ C√ÅC CH·ª¶ ƒê·ªÄ ƒê√É C√ì:")
        if assessment.covered_topics:
            for topic in assessment.covered_topics:
                print(f"‚Ä¢ {topic}")
        else:
            print("(Ch∆∞a c√≥ ch·ªß ƒë·ªÅ n√†o ƒë∆∞·ª£c ƒë√°nh gi√° l√† ƒë·∫ßy ƒë·ªß)")

        print(f"\n‚ùå C√ÅC CH·ª¶ ƒê·ªÄ THI·∫æU:")
        if assessment.missing_topics:
            for topic in assessment.missing_topics:
                print(f"‚Ä¢ {topic}")
        else:
            print("(Kh√¥ng c√≥ ch·ªß ƒë·ªÅ n√†o thi·∫øu)")

    def run(self, user_request: str) -> CoverageAssessment:
        self.logger.info(f"Processing request: {user_request}")

        subtopics = self.subtopic_agent.run(user_request)
        self.logger.info(f"Extracted {len(subtopics)} subtopics")

        if not subtopics:
            self.logger.warning("No subtopics extracted")
            assessment = CoverageAssessment(
                level=CoverageLevel.INSUFFICIENT,
                score=0.0,
                missing_topics=[],
                covered_topics=[],
            )
            print("‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu.")
            return assessment

        # Vector search
        all_chunks = []
        for sub in subtopics:
            results = self.vector_searcher.search(sub)
            all_chunks.extend(results)
            self.logger.info(f"Found {len(results)} chunks for: {sub}")

        # Deduplication
        unique_chunks = self.vector_searcher.deduplicate(all_chunks)
        self.logger.info(f"After deduplication: {len(unique_chunks)} unique chunks")

        # Coverage evaluation
        assessment = self.coverage_agent.run(user_request, subtopics, unique_chunks)
        self.logger.info(f"Coverage assessment: {assessment.level.value} ({assessment.score:.2f})")

        # Print report
        self.print_report(user_request, subtopics, unique_chunks, assessment)
        return assessment
