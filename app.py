# app.py - FIXED VERSION
import os
import sys
import json
import tempfile
from uuid import uuid4
from pathlib import Path
from datetime import datetime
from typing import Optional
from modules.agents.EnhancedChatAgent import EnhancedChatAgent
from modules.slide_plan.SlidePipeline import SlidePipeline
from modules.agents.SlideContentWriterAgent import SlideContentWriterAgent

# === ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi t·ªõi project / templates / static ===
BASE_DIR = Path(__file__).resolve().parent
TEMPLATES_DIR = BASE_DIR / "templates"
STATIC_DIR = BASE_DIR / "static"

sys.path.insert(0, str(BASE_DIR))

from flask import (
    Flask, render_template, render_template_string, request, redirect,
    url_for, session, send_from_directory, abort, jsonify
)
from jinja2 import TemplateNotFound

# Import pipeline + LLM client
from modules.quiz_plan.QuizPipeline import QuizPipeline
from utils.GPTClient import GPTClient
from graph_app.flow import run_flow

# ======== HTML Fallback t·ªëi thi·ªÉu ========
MINIMAL_FORM_HTML = """<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Edu Mate</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='css/form.css') }}"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"/>
</head>
<body>
  <div class="container">
    <div class="header">
      <div class="header-content">
        <div class="logo"><div class="ai-icon">ü§ñ</div><h1 class="title">Edu Mate</h1></div>
        <p class="subtitle">Tr·ª£ l√Ω AI t·∫°o k·∫ø ho·∫°ch gi·∫£ng d·∫°y & quiz</p>
      </div>
    </div>
    <div class="form-container">
      <form id="eduForm" method="POST" action="/process" enctype="multipart/form-data">
        <div class="form-grid">
          <div class="input-group">
            <label class="label" for="grade">Kh·ªëi l·ªõp*</label>
            <select class="select" id="grade" name="grade" required>
              <option value="">Ch·ªçn kh·ªëi l·ªõp</option>
              {% for i in range(1,13) %}<option value="{{ i }}">L·ªõp {{ i }}</option>{% endfor %}
            </select>
          </div>
          <div class="input-group">
            <label class="label" for="textbook">B·ªô s√°ch</label>
            <select class="select" id="textbook" name="textbook">
              <option value="">Ch·ªçn b·ªô s√°ch</option>
              <option value="ketnoi">K·∫øt n·ªëi tri th·ª©c</option>
              <option value="chantroi">Ch√¢n tr·ªùi s√°ng t·∫°o</option>
              <option value="canhdieu">C√°nh Di·ªÅu</option>
            </select>
          </div>
          <div class="input-group">
            <label class="label" for="subject">M√¥n h·ªçc*</label>
            <input class="input" id="subject" name="subject" required placeholder="VD: To√°n, VƒÉn, Anh"/>
          </div>
          <div class="input-group">
            <label class="label" for="topic">Ch·ªß ƒë·ªÅ*</label>
            <input class="input" id="topic" name="topic" required placeholder="VD: Ph∆∞∆°ng tr√¨nh b·∫≠c 2"/>
          </div>
          <div class="input-group">
            <label class="label" for="duration">Th·ªùi gian (ph√∫t)</label>
            <input type="number" class="input" id="duration" name="duration" min="15" max="180" placeholder="45"/>
          </div>
          <div class="input-group full-width">
            <label class="label">Lo·∫°i n·ªôi dung*</label>
            <div class="checkbox-group">
              <label class="checkbox-item"><input type="checkbox" name="content_type[]" value="lesson_plan"/> <span>K·∫ø ho·∫°ch gi·∫£ng d·∫°y</span></label>
              <label class="checkbox-item"><input type="checkbox" name="content_type[]" value="quiz"/> <span>Quiz</span></label>
              <label class="checkbox-item"><input type="checkbox" name="content_type[]" value="slide_plan"/> <span>Slide Plan</span></label>
            </div>
            <div class="error-message" id="content-error" style="display:none;">Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 lo·∫°i n·ªôi dung</div>
          </div>
          <div class="input-group">
            <label class="label" for="teaching_style">Phong c√°ch</label>
            <select class="select" id="teaching_style" name="teaching_style">
              <option value="">Ch·ªçn phong c√°ch</option>
              <option value="interactive">T∆∞∆°ng t√°c</option>
              <option value="visual">Tr·ª±c quan</option>
              <option value="practical">Th·ª±c h√†nh</option>
              <option value="traditional">Truy·ªÅn th·ªëng</option>
              <option value="gamified">Gamification</option>
            </select>
          </div>
          <div class="input-group">
            <label class="label" for="difficulty">M·ª©c ƒë·ªô</label>
            <select class="select" id="difficulty" name="difficulty">
              <option value="">Ch·ªçn m·ª©c ƒë·ªô</option>
              <option value="easy">D·ªÖ</option>
              <option value="medium">Trung b√¨nh</option>
              <option value="hard">Kh√≥</option>
              <option value="mixed">H·ªón h·ª£p</option>
            </select>
          </div>
          <div class="input-group full-width">
            <label class="label" for="files">ƒê√≠nh k√®m</label>
            <div class="file-upload" id="fileUpload">
              <input type="file" id="files" name="files[]" multiple accept=".pdf,.doc,.docx,.ppt,.pptx,.txt,.jpg,.png"/>
              <label class="file-upload-label" for="files"><span>K√©o th·∫£ ho·∫∑c click ƒë·ªÉ ch·ªçn</span></label>
              <div class="file-list" id="fileList"></div>
            </div>
          </div>
          <div class="input-group full-width">
            <label class="label" for="additional_requirements">Y√™u c·∫ßu b·ªï sung</label>
            <textarea class="textarea" id="additional_requirements" name="additional_requirements" placeholder="VD: th√™m ho·∫°t ƒë·ªông nh√≥m, t·∫≠p trung HS y·∫øu‚Ä¶"></textarea>
          </div>
        </div>
        <button type="submit" class="submit-btn">üöÄ T·∫°o n·ªôi dung gi·∫£ng d·∫°y v·ªõi AI</button>
      </form>
    </div>
  </div>
  <script src="{{ url_for('static', filename='js/form.js') }}"></script>
</body>
</html>"""

def create_app():
    app = Flask(
        __name__,
        template_folder=str(TEMPLATES_DIR),
        static_folder=str(STATIC_DIR),
        static_url_path="/static",
    )
    app.secret_key = os.urandom(24).hex()
    app.config["TEMPLATES_AUTO_RELOAD"] = True

    # Th∆∞ m·ª•c output
    output_dir = BASE_DIR / "output_lesson_plans"
    output_dir.mkdir(parents=True, exist_ok=True)
    quiz_output_dir = BASE_DIR / "output_quizzes"
    quiz_output_dir.mkdir(parents=True, exist_ok=True)
    slide_output_dir = BASE_DIR / "output_slides"
    slide_output_dir.mkdir(parents=True, exist_ok=True)

    app.config["OUTPUT_DIR"] = str(output_dir)
    app.config["QUIZ_OUTPUT_DIR"] = str(quiz_output_dir)
    app.config["SLIDE_OUTPUT_DIR"] = str(slide_output_dir)

    # ========= LLM & PIPELINE (Lazy) =========
    _quiz_pipeline = {"inst": None}
    _slide_pipeline = {"inst": None}

    def build_llm() -> GPTClient:
        """T·∫°o GPTClient v·ªõi ƒë·∫ßy ƒë·ªß tham s·ªë v√† error handling"""
        api_key = os.environ.get("AZURE_API_KEY")
        endpoint = os.environ.get("AZURE_ENDPOINT") 
        model = os.environ.get("AZURE_MODEL")
        api_version = os.environ.get("AZURE_API_VERSION")
        
        # Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt
        missing_vars = []
        if not api_key:
            missing_vars.append("AZURE_API_KEY")
        if not endpoint:
            missing_vars.append("AZURE_ENDPOINT")
        if not model:
            missing_vars.append("AZURE_MODEL") 
        if not api_version:
            missing_vars.append("AZURE_API_VERSION")

        if missing_vars:
            raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}")
        
        try:
            return GPTClient(
                api_key=api_key,
                endpoint=endpoint,
                model=model, 
                api_version=api_version
            )
        except Exception as e:
            raise Exception(f"Failed to initialize GPTClient: {str(e)}")

    def get_quiz_pipeline() -> "QuizPipeline":
        if _quiz_pipeline["inst"] is None:
            llm_client = build_llm()
            _quiz_pipeline["inst"] = QuizPipeline(llm_client)
        return _quiz_pipeline["inst"]

    def get_slide_pipeline() -> "SlidePipeline":
        if _slide_pipeline["inst"] is None:
            llm_client = build_llm()
            _slide_pipeline["inst"] = SlidePipeline(llm_client)
        return _slide_pipeline["inst"]

    # ========= Utils =========
    def read_text_file(path: Path) -> str:
        try:
            return path.read_text(encoding="utf-8")
        except Exception as e:
            print(f"[ERROR] Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file {path}: {e}")
            return ""

    def to_abs_path(maybe_rel_path: str) -> Optional[Path]:
        """Tr·∫£ v·ªÅ Path tuy·ªát ƒë·ªëi; n·∫øu r·ªóng tr·∫£ v·ªÅ None"""
        if not maybe_rel_path:
            return None
        p = Path(maybe_rel_path)
        return p if p.is_absolute() else (BASE_DIR / p).resolve()

    def slugify(s: str) -> str:
        import unicodedata, re as _re
        s = (s or "").strip().lower()
        s = unicodedata.normalize("NFD", s)
        s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
        s = _re.sub(r"[^a-z0-9]+", "_", s).strip("_")
        return s

    def find_latest_quiz(topic_hint: str = "", within_minutes: int = 10) -> Optional[Path]:
        """T√¨m file .json m·ªõi nh·∫•t trong QUIZ_OUTPUT_DIR"""
        qdir = Path(app.config["QUIZ_OUTPUT_DIR"])
        files = sorted(qdir.glob("*.json"), key=lambda p: p.stat().st_mtime, reverse=True)
        if not files:
            return None
        
        # ∆Øu ti√™n theo topic
        hint = slugify(topic_hint)
        if hint:
            for f in files:
                if hint[:10] and hint.split("_")[0] in f.name.lower():
                    return f
        
        # Sau ƒë√≥ theo th·ªùi gian g·∫ßn nh·∫•t
        now = datetime.now().timestamp()
        for f in files:
            if now - f.stat().st_mtime <= within_minutes * 60:
                return f
        
        # Cu·ªëi c√πng: file m·ªõi nh·∫•t
        return files[0]

    def find_latest_slide(topic_hint: str = "", within_minutes: int = 10) -> Optional[Path]:
        """T√¨m file slide m·ªõi nh·∫•t trong SLIDE_OUTPUT_DIR"""
        sdir = Path(app.config["SLIDE_OUTPUT_DIR"])
        
        # T√¨m c·∫£ .md v√† .json files
        files = list(sdir.glob("*.json")) + list(sdir.glob("*.md"))
        files = sorted(files, key=lambda p: p.stat().st_mtime, reverse=True)
        
        if not files:
            print(f"[find_latest_slide] No slide files found in {sdir}")
            return None
        
        print(f"[find_latest_slide] Found {len(files)} slide files: {[f.name for f in files[:3]]}")
        
        # ∆Øu ti√™n theo topic
        hint = slugify(topic_hint)
        if hint:
            for f in files:
                if hint[:10] and hint.split("_")[0] in f.name.lower():
                    print(f"[find_latest_slide] Found topic match: {f.name}")
                    return f
        
        # Sau ƒë√≥ theo th·ªùi gian g·∫ßn nh·∫•t
        now = datetime.now().timestamp()
        for f in files:
            if now - f.stat().st_mtime <= within_minutes * 60:
                print(f"[find_latest_slide] Found time match: {f.name}")
                return f
        
        # Cu·ªëi c√πng: file m·ªõi nh·∫•t
        latest = files[0]
        print(f"[find_latest_slide] Using latest file: {latest.name}")
        return latest

    def find_quiz_md_pair(qjson_path: Path, qdata: dict) -> Optional[Path]:
        """T√¨m file .md "c·∫∑p" v·ªõi quiz JSON"""
        # 1) Theo key trong JSON
        for k in ("markdown_path", "md_path", "quiz_markdown_path"):
            p = qdata.get(k)
            if isinstance(p, str) and p.strip():
                try_path = Path(p)
                if not try_path.is_absolute():
                    try_path = (Path(app.config["QUIZ_OUTPUT_DIR"]) / try_path).resolve()
                if try_path.is_file():
                    return try_path
        # 2) C√πng stem
        cand1 = qjson_path.with_suffix(".md")
        if cand1.is_file():
            return cand1
        cand2 = Path(app.config["QUIZ_OUTPUT_DIR"]) / (qjson_path.stem + ".md")
        if cand2.is_file():
            return cand2
        return None

    def read_slide_content(slide_path: Path) -> dict:
        """ƒê·ªçc n·ªôi dung slide t·ª´ file (.md ho·∫∑c .json)"""
        try:
            if slide_path.suffix.lower() == ".json":
                # File JSON - parse tr·ª±c ti·∫øp
                content = json.loads(slide_path.read_text(encoding="utf-8"))
                return content
            elif slide_path.suffix.lower() == ".md":
                # File Markdown - wrap trong object
                markdown_content = slide_path.read_text(encoding="utf-8")
                return {
                    "type": "markdown",
                    "content": markdown_content,
                    "filename": slide_path.name,
                    "slides": parse_markdown_slides(markdown_content)
                }
            else:
                return {"error": f"Unsupported slide file type: {slide_path.suffix}"}
        except Exception as e:
            print(f"[read_slide_content] Error reading {slide_path}: {e}")
            return {"error": f"Cannot read slide file: {str(e)}"}

    def parse_markdown_slides(markdown_content: str) -> list:
        """Parse markdown content th√†nh danh s√°ch slides"""
        try:
            # Split theo c√°c heading level 1 ho·∫∑c 2
            import re
            slides = re.split(r'\n(?=#{1,2}\s)', markdown_content)
            
            # Clean up v√† format
            parsed_slides = []
            for i, slide in enumerate(slides):
                if slide.strip():
                    # Extract title (first line)
                    lines = slide.strip().split('\n')
                    title = lines[0].strip('#').strip() if lines else f"Slide {i+1}"
                    content = '\n'.join(lines[1:]).strip() if len(lines) > 1 else ""
                    
                    parsed_slides.append({
                        "slide_number": i + 1,
                        "title": title,
                        "content": content
                    })
            
            return parsed_slides
        except Exception as e:
            print(f"[parse_markdown_slides] Error: {e}")
            return [{"slide_number": 1, "title": "Slide Content", "content": markdown_content}]

    # ========= Routes =========
    @app.route("/")
    def home():
        return redirect(url_for("form_page"))

    @app.route("/form")
    def form_page():
        try:
            return render_template("form.html")
        except TemplateNotFound:
            try:
                return render_template("index.html")
            except TemplateNotFound:
                return render_template_string(MINIMAL_FORM_HTML)
        except Exception as e:
            print("Error in /form:", repr(e))
            return {"error": "L·ªói render trang form", "details": str(e)}, 500

    @app.route("/process", methods=["POST"])
    def process():
        try:
            form_data_raw = request.form.to_dict(flat=True)
            content_types = request.form.getlist("content_type[]")
            files = request.files.getlist("files[]")

            print(f"üéØ [/process] Form data received: {form_data_raw}")
            print(f"üéØ [/process] Content types: {content_types}")
            print(f"üéØ [/process] Files: {[f.filename for f in files if f.filename]}")
            
            # Validation
            if not content_types:
                return jsonify({
                    "error": "Validation failed",
                    "details": "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i n·ªôi dung"
                }), 400

            # Clear session keys
            session.pop("md_basename", None)
            session.pop("quiz_basename", None)
            session.pop("slide_basename", None)
            print("üóëÔ∏è Cleared all previous session data")

            # L∆∞u file t·∫°m
            saved_files = []
            for file in files:
                if file and getattr(file, "filename", ""):
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
                        file.save(tmp.name)
                        saved_files.append(tmp.name)

            # T·∫°o JSON data cho flow
            json_data = {
                "grade": form_data_raw.get("grade", ""),
                "textbook": form_data_raw.get("textbook", ""),
                "subject": form_data_raw.get("subject", ""),
                "topic": form_data_raw.get("topic", ""),
                "duration": form_data_raw.get("duration", ""),
                "content_types": content_types,
                "teaching_style": form_data_raw.get("teaching_style", ""),
                "difficulty": form_data_raw.get("difficulty", ""),
                "additional_requirements": form_data_raw.get("additional_requirements", ""),
                "files": saved_files,
                "timestamp": form_data_raw.get("timestamp", ""),
                
                # Config cho quiz
                "quiz_source": "material",
                "quiz_config": {
                    "difficulty": form_data_raw.get("difficulty", "medium"),
                    "question_count": 10,
                },
                
                # Config cho slide
                "slide_config": {
                    "color_scheme": "blue",
                    "export": {"pptx": True, "pdf": False},
                    "create_google_slides": True,
                    "tone": form_data_raw.get("teaching_style", "th√¢n thi·ªán")
                }
            }

            session["form_data"] = json_data
            print(f"üíæ [/process] Saved to session: {json_data}")

            # Ch·∫°y pipeline
            print(f"\nüöÄ Running flow with content_types: {content_types}")
            state = run_flow(json_data) or {}
            if not isinstance(state, dict):
                state = {}

            print(f"‚úÖ Flow completed. State keys: {list(state.keys())}")

            # ====== X·ª¨ L√ù K·∫æT QU·∫¢ LESSON PLAN ======
            if "lesson_plan" in content_types:
                print("üìò Processing lesson plan result...")
                lesson_plan = state.get("lesson_plan") or {}
                md_path_pipeline = lesson_plan.get("markdown_path", "")
                md_path = to_abs_path(md_path_pipeline)
                output_dir = Path(app.config["OUTPUT_DIR"])

                if (md_path is None) or (not Path(md_path).exists()) or (not Path(md_path).is_file()):
                    print(f"[/process] markdown_path kh√¥ng s·∫µn c√≥: {md_path_pipeline}")
                    complete_markdown = lesson_plan.get("complete_markdown", "")
                    fallback_name = f"lesson_{uuid4().hex}.md"
                    md_path = (output_dir / fallback_name).resolve()
                    try:
                        md_path.write_text(complete_markdown or "", encoding="utf-8")
                        print(f"[/process] Fallback -> ƒë√£ ghi markdown v√†o: {md_path}")
                    except Exception as fe:
                        print(f"[/process] Fallback ERROR khi ghi file: {fe}")

                if md_path and Path(md_path).exists():
                    md_basename = Path(md_path).name
                    session["md_basename"] = md_basename
                    print(f"‚úÖ Lesson plan saved: {md_basename}")
                else:
                    print("‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u lesson plan")
            else:
                print("‚≠ï Skip lesson plan processing (not selected)")

            # ====== X·ª¨ L√ù K·∫æT QU·∫¢ QUIZ - FIXED ======
            if "quiz" in content_types:
                print("üìù Processing quiz result...")
                quiz_path = None
                
                # T√¨m quiz t·ª´ state
                quiz_state = state.get("quiz") or {}
                
                # Ki·ªÉm tra c√°c key c√≥ th·ªÉ ch·ª©a ƒë∆∞·ªùng d·∫´n quiz
                possible_keys = ["json_path", "output_path", "path", "file_path", "filepath", "file", "quiz_path", "quiz_file"]
                
                for key in possible_keys:
                    # Ki·ªÉm tra trong state g·ªëc tr∆∞·ªõc
                    value = state.get(key)
                    if not value:
                        # Ki·ªÉm tra trong quiz_state
                        value = quiz_state.get(key)
                    
                    if value and isinstance(value, str):
                        potential_path = to_abs_path(value)
                        if potential_path and potential_path.exists() and potential_path.suffix == ".json":
                            quiz_path = potential_path
                            print(f"‚úÖ Found quiz file via key '{key}': {quiz_path}")
                            break
                
                # N·∫øu kh√¥ng t√¨m th·∫•y t·ª´ state, t√¨m file m·ªõi nh·∫•t theo topic
                if not quiz_path:
                    print("üîç Quiz path not found in state, searching for latest file...")
                    topic_hint = json_data.get("topic", "") or json_data.get("subject", "")
                    quiz_path = find_latest_quiz(topic_hint=topic_hint, within_minutes=15)
                    if quiz_path:
                        print(f"‚úÖ Found quiz file by latest search: {quiz_path}")

                # L∆∞u quiz basename v√†o session
                if quiz_path and quiz_path.exists():
                    session["quiz_basename"] = quiz_path.name
                    print(f"‚úÖ Quiz saved: {quiz_path.name}")
                    
                    # Debug: In ra th√¥ng tin chi ti·∫øt v·ªÅ quiz file
                    try:
                        with open(quiz_path, 'r', encoding='utf-8') as f:
                            quiz_data = json.load(f)
                            print(f"üîç Quiz file content keys: {list(quiz_data.keys()) if isinstance(quiz_data, dict) else 'Not a dict'}")
                    except Exception as e:
                        print(f"‚ùå Error reading quiz file: {e}")
                else:
                    print("‚ùå Kh√¥ng t√¨m th·∫•y quiz file")
                    # Debug: List all files in quiz directory
                    quiz_dir = Path(app.config["QUIZ_OUTPUT_DIR"])
                    if quiz_dir.exists():
                        all_quiz_files = list(quiz_dir.glob("*.json"))
                        print(f"üìÇ All quiz files in directory: {[f.name for f in all_quiz_files]}")
            else:
                print("‚≠ï Skip quiz processing (not selected)")

            # ====== X·ª¨ L√ù K·∫æT QU·∫¢ SLIDE PLAN - FIXED ======
            if "slide_plan" in content_types:
                print("üìä Processing slide plan result...")
                
                # Ki·ªÉm tra k·∫øt qu·∫£ t·ª´ state
                slide_state = state.get("slide_plan") or {}
                slide_path = None
                
                # T√¨m slide result t·ª´ state v·ªõi nhi·ªÅu key kh·∫£ nƒÉng
                for k in ("json_path", "output_path", "path", "file_path", "filepath", "file", "slide_path", "slide_file", "markdown_path"):
                    v = slide_state.get(k)
                    if v:
                        p = to_abs_path(v)
                        if p and p.exists() and p.is_file():
                            slide_path = p
                            print(f"[slide_processing] Found slide via key '{k}': {p}")
                            break
                
                # N·∫øu ch∆∞a c√≥ slide t·ª´ flow, th·ª≠ t√¨m file m·ªõi nh·∫•t
                if not slide_path:
                    print("üìä Searching for latest slide file...")
                    topic_hint = json_data.get("topic", "") or json_data.get("subject", "")
                    slide_path = find_latest_slide(topic_hint=topic_hint)

                # N·∫øu v·∫´n kh√¥ng c√≥, th·ª≠ t·∫°o b·∫±ng pipeline tr·ª±c ti·∫øp
                if not slide_path:
                    print("üìä Creating slide plan directly...")
                    try:
                        # L·∫•y lesson plan ƒë·ªÉ t·∫°o slide
                        lesson_plan = state.get("lesson_plan", {})
                        if lesson_plan:
                            sp = get_slide_pipeline()
                            slide_result = sp.create_slide_from_lesson_plan(
                                lesson_plan_content=json.dumps(lesson_plan, ensure_ascii=False),
                                user_requirements=json_data.get("additional_requirements", ""),
                                slide_config=json_data.get("slide_config", {})
                            )
                            
                            if slide_result.get("success"):
                                slide_json_path = slide_result.get("json_path") or slide_result.get("markdown_path")
                                if slide_json_path:
                                    slide_path = Path(slide_json_path)
                                    print(f"‚úÖ Slide created via pipeline: {slide_path}")
                            else:
                                print(f"‚ùå Slide creation failed: {slide_result.get('error')}")
                    except Exception as e:
                        print(f"‚ùå Error creating slide plan: {e}")

                if slide_path and slide_path.exists():
                    session["slide_basename"] = slide_path.name
                    print(f"‚úÖ Slide plan saved: {slide_path.name}")
                else:
                    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y slide plan file")
            else:
                print("‚≠ï Skip slide plan processing (not selected)")

            # ====== ƒêI·ªÄU H∆Ø·ªöNG D·ª∞A TR√äN CHOICE ======
            selected = set(content_types)
            print(f"üéØ Final redirect decision for: {selected}")
            
            # Always redirect to chat page to show results
            print("‚û°Ô∏è Redirect to chat page")
            return redirect(url_for("chat"))

        except Exception as e:
            print("‚ùå Error in /process:", str(e))
            import traceback
            traceback.print_exc()
            return jsonify({
                "error": "L·ªói x·ª≠ l√Ω form", 
                "details": str(e)
            }), 500

    @app.route("/chat")
    def chat():
        try:
            form_data = session.get("form_data", {})
            md_basename = session.get("md_basename", "")
            quiz_basename = session.get("quiz_basename", "")
            slide_basename = session.get("slide_basename", "")

            print(f"üîç [/chat] Debug - form_data keys: {list(form_data.keys())}")
            print(f"üîç [/chat] Debug - content_types: {form_data.get('content_types', [])}")
            print(f"üîç [/chat] Debug - md_basename: {md_basename}")
            print(f"üîç [/chat] Debug - quiz_basename: {quiz_basename}")
            print(f"üîç [/chat] Debug - slide_basename: {slide_basename}")

            # ----- Lesson plan -----
            lesson_markdown = ""
            md_download_url = ""
            if md_basename:
                md_path = Path(app.config["OUTPUT_DIR"]) / md_basename
                if md_path.is_file():
                    lesson_markdown = read_text_file(md_path)
                    md_download_url = url_for("lesson_download", filename=md_basename)
                    print(f"[/chat] ‚úÖ Lesson plan loaded: {len(lesson_markdown)} chars from {md_basename}")
                else:
                    print(f"[/chat] ‚ùå Lesson plan file not found: {md_path}")
            else:
                print("[/chat] ‚ÑπÔ∏è No lesson plan in session")

            # ----- X·ª¨ L√ù QUIZ - FIXED -----
            quiz_content = None
            quiz_download_url = ""
            if quiz_basename:
                qp = Path(app.config["QUIZ_OUTPUT_DIR"]) / quiz_basename
                print(f"[/chat] üîç Looking for quiz file: {qp}")
                
                if qp.is_file():
                    print(f"[/chat] üìù Processing quiz file: {quiz_basename}")
                    # ƒê·ªçc JSON
                    try:
                        qdata = json.loads(qp.read_text(encoding="utf-8"))
                        print(f"[/chat] ‚úÖ Quiz JSON loaded successfully, keys: {list(qdata.keys()) if isinstance(qdata, dict) else 'Not a dict'}")
                        
                        # FIXED: X·ª≠ l√Ω quiz content ƒë·ªÉ g·ª≠i cho frontend
                        # T√¨m markdown content trong JSON
                        quiz_markdown = None
                        possible_md_keys = ["complete_markdown", "markdown", "quiz_markdown", "content"]
                        
                        for key in possible_md_keys:
                            if key in qdata and isinstance(qdata[key], str) and qdata[key].strip():
                                quiz_markdown = qdata[key]
                                print(f"[/chat] ‚úÖ Found quiz markdown in key '{key}': {len(quiz_markdown)} chars")
                                break
                        
                        if quiz_markdown:
                            # G·ª≠i markdown content cho frontend
                            quiz_content = quiz_markdown
                        else:
                            # Fallback: g·ª≠i to√†n b·ªô JSON object
                            quiz_content = qdata
                            
                    except Exception as e:
                        print(f"[/chat] ‚ùå Error reading quiz JSON: {e}")
                        qdata = {}
                        quiz_content = {}

                    # T√¨m file .md c·∫∑p (n·∫øu c√≥)
                    md_pair = find_quiz_md_pair(qp, qdata)
                    if md_pair and md_pair.is_file():
                        try:
                            quiz_md = md_pair.read_text(encoding="utf-8")
                            quiz_content = quiz_md  # ∆Øu ti√™n markdown file
                            quiz_download_url = url_for("quiz_download_md", filename=md_pair.name)
                            print(f"[/chat] ‚úÖ Quiz markdown file found: {len(quiz_md)} chars from {md_pair.name}")
                        except Exception as e:
                            print(f"[/chat] ‚ùå Cannot read quiz MD {md_pair}: {e}")
                    
                    # Set download URL
                    if not quiz_download_url:
                        quiz_download_url = url_for("quiz_download", filename=quiz_basename)
                        
                else:
                    print(f"[/chat] ‚ùå Quiz file not found: {qp}")
                    
                    # Th·ª≠ t√¨m quiz file kh√°c trong th∆∞ m·ª•c
                    quiz_dir = Path(app.config["QUIZ_OUTPUT_DIR"])
                    if quiz_dir.exists():
                        all_quiz_files = sorted(quiz_dir.glob("*.json"), key=lambda x: x.stat().st_mtime, reverse=True)
                        print(f"[/chat] üìÇ Available quiz files: {[f.name for f in all_quiz_files[:5]]}")
                        
                        if all_quiz_files:
                            # Th·ª≠ d√πng file m·ªõi nh·∫•t
                            latest_quiz = all_quiz_files[0]
                            print(f"[/chat] üîÑ Trying latest quiz file: {latest_quiz.name}")
                            try:
                                qdata = json.loads(latest_quiz.read_text(encoding="utf-8"))
                                
                                # T√¨m markdown content
                                quiz_markdown = None
                                for key in ["complete_markdown", "markdown", "quiz_markdown", "content"]:
                                    if key in qdata and isinstance(qdata[key], str) and qdata[key].strip():
                                        quiz_markdown = qdata[key]
                                        break
                                
                                quiz_content = quiz_markdown if quiz_markdown else qdata
                                session["quiz_basename"] = latest_quiz.name  # Update session
                                quiz_download_url = url_for("quiz_download", filename=latest_quiz.name)
                                print(f"[/chat] ‚úÖ Loaded latest quiz file successfully")
                            except Exception as e:
                                print(f"[/chat] ‚ùå Error reading latest quiz: {e}")
            else:
                print("[/chat] ‚ÑπÔ∏è No quiz in session")

            # ----- X·ª¨ L√ù SLIDE CONTENT - FIXED -----
            slide_content = None
            slide_download_url = ""
            
            if slide_basename:
                sp = Path(app.config["SLIDE_OUTPUT_DIR"]) / slide_basename
                if sp.is_file():
                    print(f"[/chat] üìä Processing slide file: {slide_basename}")
                    try:
                        # S·ª≠ d·ª•ng helper function ƒë·ªÉ ƒë·ªçc slide
                        slide_data = read_slide_content(sp)
                        
                        # FIXED: X·ª≠ l√Ω slide content ƒë·ªÉ g·ª≠i cho frontend
                        if slide_data.get("type") == "markdown":
                            # N·∫øu l√† markdown file, g·ª≠i content
                            slide_content = slide_data.get("content", "")
                        elif isinstance(slide_data, dict) and "content" in slide_data:
                            # N·∫øu l√† JSON c√≥ content
                            slide_content = slide_data.get("content", "")
                        elif isinstance(slide_data, dict):
                            # N·∫øu l√† JSON object, t√¨m markdown content
                            possible_keys = ["markdown", "slide_markdown", "content", "complete_markdown"]
                            for key in possible_keys:
                                if key in slide_data and isinstance(slide_data[key], str) and slide_data[key].strip():
                                    slide_content = slide_data[key]
                                    break
                            
                            # Fallback: convert object to JSON string
                            if not slide_content:
                                slide_content = json.dumps(slide_data, ensure_ascii=False, indent=2)
                        else:
                            slide_content = str(slide_data)
                        
                        slide_download_url = url_for("slide_download", filename=slide_basename)
                        print(f"[/chat] ‚úÖ Slide content loaded: {len(str(slide_content))} chars from {slide_basename}")
                    except Exception as e:
                        print(f"[/chat] ‚ùå Cannot read slide file {sp}: {e}")
                        slide_content = f"Error reading slide file: {str(e)}"
                else:
                    print(f"[/chat] ‚ùå Slide file not found: {sp}")
            else:
                # Ki·ªÉm tra xem c√≥ slide_plan trong content_types kh√¥ng
                content_types = form_data.get('content_types', [])
                if 'slide_plan' in content_types:
                    print("[/chat] üìä Slide plan was requested but no file found")
                    slide_content = "Slide plan ƒë∆∞·ª£c y√™u c·∫ßu nh∆∞ng ch∆∞a t·∫°o th√†nh c√¥ng"
                else:
                    print("[/chat] ‚ÑπÔ∏è No slide plan requested")
                    slide_content = ""

            # Debug final data
            print(f"[/chat] üì§ Sending to template:")
            print(f"   - lesson_markdown: {len(lesson_markdown)} chars")
            print(f"   - quiz_content: {type(quiz_content)} ({len(str(quiz_content)) if quiz_content else 0} chars)")
            print(f"   - slide_content: {type(slide_content)} ({len(str(slide_content)) if slide_content else 0} chars)")
            print(f"   - md_download_url: {md_download_url}")
            print(f"   - quiz_download_url: {quiz_download_url}")
            print(f"   - slide_download_url: {slide_download_url}")

            return render_template(
                "chat.html",
                form_data=form_data,
                lesson_markdown=lesson_markdown,
                md_download_url=md_download_url,
                quiz_content=quiz_content,
                quiz_download_url=quiz_download_url,
                slide_content=slide_content,
                slide_download_url=slide_download_url,
            )
        except TemplateNotFound as e:
            return {"error": "L·ªói render trang chat", "details": str(e)}, 500
        except Exception as e:
            print("‚ùå Error in /chat:", str(e))
            import traceback
            traceback.print_exc()
            return {"error": "L·ªói render trang chat", "details": str(e)}, 500

    @app.route("/quiz")
    def quiz_page():
        """Trang hi·ªÉn th·ªã quiz.html"""
        try:
            form_data = session.get("form_data", {})
            quiz_basename = session.get("quiz_basename", "")
            quiz_content = None
            quiz_download_url = ""

            if quiz_basename:
                qp = Path(app.config["QUIZ_OUTPUT_DIR"]) / quiz_basename
                if qp.is_file():
                    try:
                        quiz_content = json.loads(qp.read_text(encoding="utf-8"))
                        print(f"[/quiz] Render {quiz_basename}")
                    except Exception as e:
                        print(f"[/quiz] Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c quiz {quiz_basename}: {e}")
                else:
                    print(f"[/quiz] Quiz file kh√¥ng t·ªìn t·∫°i: {qp}")
            else:
                print("[/quiz] Ch∆∞a c√≥ quiz_basename trong session")

            return render_template(
                "quiz.html",
                form_data=form_data,
                quiz_content=quiz_content,
                quiz_download_url=quiz_download_url,
            )
        except TemplateNotFound as e:
            return {"error": "L·ªói render trang Quiz", "details": str(e)}, 500
        except Exception as e:
            print("‚ùå Error in /quiz:", str(e))
            return {"error": "L·ªói render trang Quiz", "details": str(e)}, 500

    @app.route("/lesson/download/<path:filename>")
    def lesson_download(filename):
        safe_name = os.path.basename(filename)
        file_path = Path(app.config["OUTPUT_DIR"]) / safe_name
        if not file_path.is_file():
            abort(404)
        return send_from_directory(
            Path(app.config["OUTPUT_DIR"]), safe_name, as_attachment=True, mimetype="text/markdown"
        )

    @app.route("/quiz/download/<path:filename>")
    def quiz_download(filename):
        """Gi·ªØ l·∫°i n·∫øu b·∫°n v·∫´n t·∫£i JSON ·ªü n∆°i kh√°c."""
        safe_name = os.path.basename(filename)
        file_path = Path(app.config["QUIZ_OUTPUT_DIR"]) / safe_name
        if not file_path.is_file():
            abort(404)
        return send_from_directory(
            Path(app.config["QUIZ_OUTPUT_DIR"]),
            safe_name,
            as_attachment=True,
            mimetype="application/json"
        )

    @app.route("/quiz/download-md/<path:filename>")
    def quiz_download_md(filename):
        """T·∫£i quiz ·ªü d·∫°ng Markdown."""
        safe_name = os.path.basename(filename)
        file_path = Path(app.config["QUIZ_OUTPUT_DIR"]) / safe_name
        if not file_path.is_file():
            abort(404)
        return send_from_directory(
            Path(app.config["QUIZ_OUTPUT_DIR"]),
            safe_name,
            as_attachment=True,
            mimetype="text/markdown"
        )

    @app.route("/slide/download/<path:filename>")
    def slide_download(filename):
        """T·∫£i slide file (.md, .html, .json...)."""
        safe_name = os.path.basename(filename)
        file_path = Path(app.config["SLIDE_OUTPUT_DIR"]) / safe_name
        if not file_path.is_file():
            abort(404)

        # X√°c ƒë·ªãnh MIME type d·ª±a v√†o ph·∫ßn m·ªü r·ªông
        ext = file_path.suffix.lower()
        if ext == ".md":
            mimetype = "text/markdown"
        elif ext == ".html":
            mimetype = "text/html"
        elif ext == ".json":
            mimetype = "application/json"
        else:
            mimetype = "application/octet-stream"

        return send_from_directory(
            Path(app.config["SLIDE_OUTPUT_DIR"]),
            safe_name,
            as_attachment=True,
            mimetype=mimetype,
        )

    @app.route("/api/slide/latest")
    def api_slide_latest():
        """API endpoint ƒë·ªÉ l·∫•y slide m·ªõi nh·∫•t"""
        try:
            form_data = session.get("form_data", {})
            topic_hint = form_data.get("topic", "") or form_data.get("subject", "")
            
            slide_path = find_latest_slide(topic_hint=topic_hint)
            if not slide_path:
                return jsonify({"error": "No slide found"}), 404
            
            slide_content = read_slide_content(slide_path)
            return jsonify({
                "success": True,
                "content": slide_content,
                "filename": slide_path.name,
                "download_url": url_for("slide_download", filename=slide_path.name)
            })
        except Exception as e:
            return jsonify({"error": str(e)}), 500

    @app.route("/slide/latest")
    def slide_latest_redirect():
        """Redirect to API endpoint"""
        return redirect(url_for("api_slide_latest"))

    @app.route("/output_slides/latest")
    def output_slides_latest():
        """Fallback endpoint ƒë·ªÉ t∆∞∆°ng th√≠ch"""
        return redirect(url_for("api_slide_latest"))

    @app.route("/generate_quiz", methods=["POST"])
    def generate_quiz():
        try:
            if request.is_json:
                data = request.get_json(silent=True) or {}
                user_prompt = data.get("prompt", "")
                chunks = data.get("chunks", [])
            else:
                user_prompt = request.form.get("prompt", "")
                chunks_raw = request.form.get("chunks", "[]")
                try:
                    chunks = json.loads(chunks_raw) if isinstance(chunks_raw, str) else (chunks_raw or [])
                except Exception:
                    chunks = []

            qp = get_quiz_pipeline()
            result = qp.create_full_quiz(user_prompt, chunks)
            status = 200 if "error" not in result else 400

            # N·∫øu pipeline tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file, gi·ªØ v√†o session ƒë·ªÉ UI d√πng lu√¥n
            quiz_file = result.get("output_path") or result.get("json_path") or result.get("file")
            if quiz_file:
                p = Path(quiz_file)
                if p.exists():
                    session["quiz_basename"] = p.name

            return jsonify(result), status
        except Exception as e:
            import traceback
            traceback.print_exc()
            return jsonify({"error": str(e)}), 500

    @app.route("/generate_slide", methods=["POST"])
    def generate_slide():
        try:
            if request.is_json:
                data = request.get_json(silent=True) or {}
                user_prompt = data.get("prompt", "")
                lesson_plan = data.get("lesson_plan", {})
                slide_config = data.get("slide_config", {})
            else:
                user_prompt = request.form.get("prompt", "")
                lesson_plan_raw = request.form.get("lesson_plan", "{}")
                slide_config_raw = request.form.get("slide_config", "{}")
                try:
                    lesson_plan = json.loads(lesson_plan_raw) if isinstance(lesson_plan_raw, str) else (lesson_plan_raw or {})
                    slide_config = json.loads(slide_config_raw) if isinstance(slide_config_raw, str) else (slide_config_raw or {})
                except Exception:
                    lesson_plan = {}
                    slide_config = {}

            sp = get_slide_pipeline()
            result = sp.create_slide_from_lesson_plan(
                lesson_plan_content=json.dumps(lesson_plan, ensure_ascii=False) if lesson_plan else user_prompt,
                user_requirements=user_prompt,
                slide_config=slide_config
            )
            status = 200 if result.get("success") else 400

            # N·∫øu pipeline tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file, gi·ªØ v√†o session
            slide_file = result.get("json_path") or result.get("markdown_path")
            if slide_file:
                p = Path(slide_file)
                if p.exists():
                    session["slide_basename"] = p.name

            return jsonify(result), status
        except Exception as e:
            import traceback
            traceback.print_exc()
            return jsonify({"error": str(e), "success": False}), 500

    return app


def find_free_port(preferred=5000):
    import socket
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        try:
            s.bind(("127.0.0.1", preferred))
            return preferred
        except OSError:
            s.bind(("127.0.0.1", 0))
            return s.getsockname()[1]


app = create_app()

if __name__ == "__main__":
    # T·ª± ƒë·ªông ch·ªçn c·ªïng tr·ªëng; c√≥ th·ªÉ ƒë·∫∑t PORT=5050 ƒë·ªÉ ch·ªâ ƒë·ªãnh
    port = int(os.getenv("PORT", "0")) or find_free_port(5000)
    print("=== Flask starting ===")
    print("BASE_DIR      :", Path(__file__).resolve().parent)
    print("TEMPLATES_DIR :", TEMPLATES_DIR, "| exists:", TEMPLATES_DIR.is_dir())
    print("STATIC_DIR    :", STATIC_DIR, "| exists:", STATIC_DIR.is_dir())
    print(f"‚ñ∂Ô∏è Open: http://127.0.0.1:{port}/form   (ho·∫∑c /)")
    app.run(debug=True, use_reloader=False, port=port)
    